name: Dev-Build
env:
    AppName: GenappExtended
    DBB_Host: '"C:\Program Files\PuTTY\plink.exe" DMJTA1@WTSC47.CPOLAB.IBM.COM -pw ${{ secrets.WTSC47_PW }}'
    MyHlq: DMJTA1
    BuildHome: /u/DMJTA1/zAppBuild
    DBBRepo: git@github.com:jt-atkins/dbb-scripts-final.git
    BUILDRepo: git@github.com:jt-atkins/dbb-zappbuild-final.git
    MyRepo: git@github.com:${{ github.repository }}.git
    MyBranch: ${{ github.ref }}
    MyWorkDir: /u/DMJTA1/zAppBuild/featurebuild/Genapp_run_${{ github.run_number }}
    # MyWorkSpace: /u/DMJTA1/zAppBuild/featurebuild/Genapp_run_${{ github.run_number }}/GenappExtended
    MyWorkSpace: /u/DMJTA1/zAppBuild/featurebuild/Genapp_run_${{ github.run_number }}
    MyApplication: cics-genapp #application folder name under the working tree in the application Git repo
    Clone: /u/DMJTA1/zAppBuild/scripts/git-clone-ssh.sh
    DBB_Build: /u/DMJTA1/zAppBuild/scripts/dbb-build.sh
    Print: /u/DMJTA1/zAppBuild/scripts/print.sh
    UCD_Package: /u/DMJTA1/zAppBuild/scripts/PublishUCD.sh
    UCD_Deploy: /u/DMJTA1/zAppBuild/scripts/DeployUCD.sh
    UCD_Server_URL: https://9.76.61.225:8443
    UCD_AppProps: /u/DMJTA1/zAppBuild/dbb-zappbuild-final/GenappML2.properties
    UCD_AppDeployProcess: Deploy
    UCD_backendComponent: App1-Genapp-ZComponent
    UCD_APIComponent: App1-Genapp-API
    UCD_TestComponent: App1-Genapp-Test
    UCDApplication: App1-Genapp
    UCD_Dev_LPAR: 'DEV'
    UCD_Test_LPAR: 'TEST'
    UCD_Prod_LPAR: 'PROD'
    UCD_PreProd_LPAR: 'PRE-PROD'
    devbranchname: 'GENAP*'
    hotfixbranchname: 'v*'

concurrency:
    group: Dev-Build
on:
  push:
    branches:
      - "GENAP**"
      - "hotfix**"
    paths:
      - "**.cbl"
      - "**.bms"
      - "**.cpy"
      
jobs:
  Dev-Build:
    runs-on: build-runner1
    steps:
      - name: Cleanup App Workspace
        run: ${{ env.DBB_Host }} rm -rf ${{ env.MyWorkDir }}  
        shell: cmd 

      - name: Wait
        run: sleep 5
        
      - name: Cleanup Build Workspace
        run: ${{ env.DBB_Host }} rm -rf ${{ env.BuildHome }}/dbb-scripts-final ${{ env.BuildHome }}/dbb-zappbuild-final
        shell: cmd 
        
      - name: Retrieve Branch Name
        uses: mad9000/actions-find-and-replace-string@3
        id: getBranch
        with:
          source: "${{ github.ref }}"
          find: 'refs/heads/'        
          replace: ''
          replaceAll: true
          
      - name: Remove - From Build Hlq
        uses: mad9000/actions-find-and-replace-string@3
        id: removeChars2
        with:
          source: "${{ steps.getBranch.outputs.value }}"
          find: '-'        
          replace: ''
          replaceAll: true
          
      - name: Remove - From Build Hlq
        uses: mad9000/actions-find-and-replace-string@3
        id: removeChars
        with:
          source: "${{ steps.removeChars2.outputs.value }}"
          find: '-'        
          replace: ''
          replaceAll: true
          
      - name: Remove / From Build Hlq
        uses: mad9000/actions-find-and-replace-string@3
        id: removeSpecial
        with:
          source: "${{ steps.removeChars.outputs.value }}"
          find: '/'        
          replace: ''
          replaceAll: true
          
      - name: Remove Spaces From Build Hlq
        uses: mad9000/actions-find-and-replace-string@3
        id: removeSpaces
        with:
          source: "${{ steps.removeSpecial.outputs.value }}"
          find: ' '        
          replace: ''
          replaceAll: true
          
      - name: Limit Feature Branch Name to 8 Characters for Build Datasets HLQ
        uses: bhowell2/github-substring-action@1.0.2
        id: hlq
        with: 
          value: "${{ steps.removeSpaces.outputs.value }}"
          length_from_start: 8
          
      - name: Clone Developer Branch to z/OS
        run: ${{ env.DBB_Host }} ${{ env.Clone }} ${{ env.MyRepo }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }}/${{ env.AppName }} ${{ env.MyBranch }}
        shell: cmd

      - name: Wait
        run: sleep 5

      - name: Clone DBB Supporting Scripts to z/OS      
        run: ${{ env.DBB_Host }} ${{ env.Clone }} ${{ env.DBBRepo }} ${{ env.BuildHome }} . main
        shell: cmd

      - name: Wait
        run: sleep 5
        
      - name: Clone zAppBuild Repo to z/OS      
        run: ${{ env.DBB_Host }} ${{ env.Clone }} ${{ env.BUILDRepo }} ${{ env.BuildHome }} . main
        shell: cmd
        
      - name: Checkout Repository to Read latest Production Tag
        uses: actions/checkout@v2
        
      - name: Read Tag From File and Store in Variable
        id: readfile
        uses: actions/github-script@v6
        with:
          script: |
              const fs = require('fs');
              try {
                const tag = fs.readFileSync('TAG.txt', 'utf8');
                console.log(`Tag value is ${tag}`);
                core.setOutput('tag', tag);
              } catch (error) {
                console.log('You need to work on a valid feature branch with a TAG.txt, please branch from Main again');
                core.setFailed('TAG.txt file not found');
              }
            
      - name: The Last Production Release Tag Deployed to Production, ${{ steps.readfile.outputs.tag }}
        if: success()
        run: echo "The previous production release tag value is ${{ steps.readfile.outputs.tag }}"              
        


      - name: Dev DBB Impact Build Based on Previous Main Tag
        id: dbb-build 
        if: startsWith(steps.getBranch.outputs.value, 'GENAP')
   #     run: ${{ env.DBB_Host }} ${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }}/${{ env.AppName }} ${{ env.MyApplication }} ${{ env.MyHlq }}.${{ steps.hlq.outputs.substring }} --impactBuild --verbose ${{ env.MyWorkSpace }}/${{ env.AppName }}:${{ steps.readfile.outputs.tag }}
   #     run: ${{ env.DBB_Host }} ${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }}/${{ env.AppName }} ${{ env.MyApplication }} ${{ env.MyHlq }}.${{ steps.hlq.outputs.substring }} -i  -b ${{ steps.readfile.outputs.tag }}        
        run: | 
          ${{ env.DBB_Host }} ${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }}/${{ env.AppName }} ${{ env.MyApplication }} ${{ env.MyHlq }}.${{ steps.hlq.outputs.substring }} -i  -b origin/main
          ${{ env.DBB_Host }} ${{ env.Print }} ${{ env.MyWorkSpace }}/work 
        shell: cmd 

      - name: Release Maintenance DBB Impact Build Based on Previous Main Tag
        if: startsWith(steps.getBranch.outputs.value, 'hotfix')
   #     run: ${{ env.DBB_Host }} ${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }}/${{ env.AppName }} ${{ env.MyApplication }} ${{ env.MyHlq }}.${{ steps.hlq.outputs.substring }} --impactBuild --verbose ${{ env.MyWorkSpace }}/${{ env.AppName }}:${{ steps.readfile.outputs.tag }}
        run: ${{ env.DBB_Host }} ${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }}/${{ env.AppName }} ${{ env.MyApplication }} ${{ env.MyHlq }} -i  -b origin/${{ steps.readfile.outputs.tag }}        
        shell: cmd 

      - name: Print Compiler Listing
        if: steps.dbb-build.outcome == 'failure' && startsWith(github.ref, 'refs/heads/GENAP')  # Conditional based on the outcome of dbb-build
        run: ${{ env.DBB_Host }} ${{ env.Print }} ${{ env.MyWorkSpace }}/${{ env.AppName }}/work 
        shell: cmd 

      - name: Package for Dev
        if: startsWith(steps.getBranch.outputs.value, 'GENAP')
   #     run: ${{ env.DBB_Host }} ${{ env.UCD_Package }}   ${{ env.UCD_backendComponent }} ${{ env.MyWorkDir }} ${{ env.UCD_AppProps }} ${{ steps.getBranch.outputs.value }}.Build.${{ github.run_number }}
        run: ${{ env.DBB_Host }} ${{ env.UCD_Package }} ${{ env.UCD_backendComponent }}  ${{ env.MyWorkDir }} ${{ env.UCD_AppProps }} ${{ steps.getBranch.outputs.value }}.Build.${{ github.run_number }}
        shell: cmd 
        
    #  - name: Deployment to Applications Dev LPAR  
    #    if: startsWith(steps.getBranch.outputs.value, 'GENAP')
    #     run: ${{ env.DBB_Host }} ${{ env.UCD_Deploy }} ${{ env.UCDApplication }}  ${{ env.UCD_Dev_LPAR }} ${{ env.UCD_Server_URL }} ${{ env.UCD_backendComponent }}:${{ steps.getBranch.outputs.value }}.Build.${{ github.run_number }}  ${{ env.UCD_AppDeployProcess }} ${{ env.UCD_AppProps }}
    #    run: ${{ env.DBB_Host }} ${{ env.UCD_Deploy }} ${{ env.UCDApplication }}  ${{ env.UCD_Dev_LPAR }} ${{ env.UCD_Server_URL }} ${{ env.UCD_backendComponent }}:${{ steps.getBranch.outputs.value }}.Build.${{ github.run_number }}  ${{ env.UCD_AppDeployProcess }} ${{ env.UCD_AppProps }}

    #    shell: cmd 

    #  - name: Hotfix Package for Pre-Prod
    #    if: startsWith(steps.getBranch.outputs.value, 'hotfix')
    #    run: ${{ env.DBB_Host }} ${{ env.UCD_Package }} ${{ env.UCD_backendComponent }}  ${{ env.MyWorkDir }} ${{ env.UCD_AppProps }} ${{ steps.getBranch.outputs.value }}${{ github.run_number }}
    #    shell: cmd 
        
    #  - name: Hotfix Deployment to Applications PreProd LPAR  
    #    if: startsWith(steps.getBranch.outputs.value, 'hotfix')
    #    run: ${{ env.DBB_Host }} ${{ env.UCD_Deploy }} ${{ env.UCDApplication }}  ${{ env.UCD_PreProd_LPAR }} ${{ env.UCD_Server_URL }} ${{ env.UCD_backendComponent }}:${{ steps.getBranch.outputs.value }}.HF.${{ github.run_number }}  ${{ env.UCD_AppDeployProcess }} ${{ env.UCD_AppProps }}
    #    run: ${{ env.DBB_Host }} ${{ env.UCD_Deploy }} ${{ env.UCDApplication }}  ${{ env.UCD_PreProd_LPAR }} ${{ env.UCD_Server_URL }} ${{ env.UCD_backendComponent }}:${{ steps.getBranch.outputs.value }}${{ github.run_number }}  ${{ env.UCD_AppDeployProcess }}
    #    shell: cmd        
